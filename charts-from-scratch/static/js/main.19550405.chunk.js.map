{"version":3,"sources":["components/CoordinateSystem/components/Notation/Notation.tsx","components/CoordinateSystem/CoordinateSystem.tsx","components/CoordinateSystem/hooks/useDiagram.ts","hooks/usePrevious.ts","components/UiBarsDiagram/hooks/useTwoWayDataChangeSupport.ts","components/UiBarsDiagram/components/BarsDisplay/BarsDisplay.tsx","hooks/useIsMousePressed.ts","components/UiBarsDiagram/UiBarsDiagram.tsx","components/UiBarsDiagram/hooks/useBarsGenerator.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Notation","direction","diagram","barWidthPx","notableStepSize","hideLevelLine","captionFontSizePx","hideNoNotableCaptions","color","levelLineColor","textColor","max","x","y","totalSteps","totalStepsX","totalStepsY","stepsArray","Array","from","keys","step","stepX","stepY","getNotation","index","coordNumber","baseXCoord","getX","bar","x1","x2","y1","getY","y2","levelLine","text","anchor","baseYCoord","stepsElements","map","_","notation","Math","abs","isNotable","stroke","textAnchor","fill","style","fontSize","WrapperStyled","styled","svg","widthPx","heightPx","Axis","g","thickness","CoordinateSystem","render","hideXNotation","hideYNotation","notableXStepSize","notableYStepSize","levelLineXColor","levelLineYColor","hideXLevelLine","hideYLevelLine","xNotationOffsetPx","yNotationOffsetPx","xNotationBarWidthPx","yNotationBarWidthPx","axisColor","captionColor","xOffset","yOffset","floor","desiredX","captionAdjustmentPx","desiredY","begin","end","stepSize","getXY","useDiagram","usePrevious","value","ref","useRef","useEffect","current","useTwoWayDataChangeSupport","barsProp","internalBars","setInternalBars","generateBars","onBarValueChanged","prevBarsPropValue","prevInternalBarsValue","existingBars","numNeededAdditionalBars","additionalBars","key","String","length","preserveStateOnNumberToNumberBarsPropChange","prevValuesMap","forEach","prevValue","currentValue","notifyInternalBarsUpdates","MarkerStyled","rect","BarsDisplay","bars","xMax","gapPercentage","markerSizePx","markerColor","markerBorderColor","markerBorderThickness","allowDrag","showDragLevelLine","dragLevelLineColor","dragLevelLineFontSizePx","dragLevelLineCaptionColor","dragLevelLineCaptionOffsetPx","dragDistanceStepPercentage","onDragDown","onDragUp","barWidthWithoutGaps","gapSize","barWidth","useState","selectedDragBar","setSelectedDragBar","lastDragMoveCoords","setLastDragMoveCoords","isMousePressed","setIsMousePressed","pressed","unpressed","document","body","addEventListener","removeEventListener","useIsMousePressed","barsElements","barIdx","barXCoord","getBarXCoord","barYCoord","finalBarWidth","finalBarHeight","markerXCoord","markerYCoord","width","height","borderColor","strokeWidth","borderThickness","onMouseMove","e","event","prevClientY","currentClientY","clientY","minDistanceToDrag","isUp","isDown","clientX","drag","onMouseDown","startDrag","activeBar","find","strokeDasharray","UiBarsDiagram","defaultBarValue","defaultBarColor","defaultBarBorderColor","defaultBarBorderThickness","barGapPercentage","readOnly","hideDragLevelLine","notableStep","showNoNotableCaptions","notationOffsetPx","notationBarWidthPx","baseBarsState","maxAmount","Infinity","isArray","barObject","filter","item","useBarsGenerator","changeValue","internalBarsCopy","targetBarIdx","findIndex","targetBar","splice","handleDragUp","handleDragDown","finalValue","div","InputContainerStyled","App","yAxisMaxBar1","setYAxisMaxBar1","yAxisMaxBar2","setYAxisMaxBar2","bars1ReadOnly","setBars1ReadOnly","bars2ReadOnly","setBars2ReadOnly","bars1","setBars1","bars2","setBars2","type","onChange","resultValue","target","marginTop","onClick","bars2Copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.19550405.chunk.js","sourcesContent":["import { FC } from 'react';\r\nimport * as CSS from 'csstype';\r\nimport { Diagram } from '../../hooks';\r\n\r\nexport interface NotationProps {\r\n  direction: 'x' | 'y';\r\n  diagram: Diagram;\r\n  barWidthPx: number;\r\n  notableStepSize: number;\r\n  hideLevelLine: boolean;\r\n  captionFontSizePx: number;\r\n  hideNoNotableCaptions: boolean;\r\n  color: CSS.Property.Color;\r\n  levelLineColor: CSS.Property.Color;\r\n  textColor: CSS.Property.Color;\r\n};\r\n\r\nconst Notation: FC<NotationProps> = ({\r\n  direction,\r\n  diagram,\r\n  barWidthPx,\r\n  notableStepSize,\r\n  hideLevelLine,\r\n  captionFontSizePx,\r\n  hideNoNotableCaptions,\r\n  color,\r\n  levelLineColor,\r\n  textColor,\r\n}) => {\r\n  const xNotation = (index: number) => {\r\n    const coordNumber = (index + 1) * diagram.stepX;\r\n    const baseXCoord = diagram.getX(coordNumber);\r\n\r\n    return {\r\n      bar: {\r\n        x1: baseXCoord,\r\n        x2: baseXCoord,\r\n        y1: diagram.getY(0),\r\n        y2: diagram.getY(0) + barWidthPx,\r\n      },\r\n      levelLine: {\r\n        x1: baseXCoord,\r\n        x2: baseXCoord,\r\n        y1: diagram.getY(diagram.y),\r\n        y2: diagram.getY(0),\r\n      },\r\n      text: {\r\n        x: baseXCoord,\r\n        y: diagram.getY(0) + barWidthPx + captionFontSizePx,\r\n        anchor: 'middle',\r\n      },\r\n    }\r\n  }\r\n\r\n  const yNotation = (index: number) => {\r\n    const textOffsetFromBarPx = 4;\r\n    const coordNumber = (index + 1) * diagram.stepY;\r\n    const baseYCoord = diagram.getY(coordNumber);\r\n\r\n    return {\r\n      bar: {\r\n        x1: diagram.getX(0) - barWidthPx,\r\n        x2: diagram.getX(0),\r\n        y1: baseYCoord,\r\n        y2: baseYCoord,\r\n      },\r\n      levelLine: {\r\n        x1: diagram.getX(0),\r\n        x2: diagram.getX(diagram.x),\r\n        y1: baseYCoord,\r\n        y2: baseYCoord,\r\n      },\r\n      text: {\r\n        x: diagram.getX(0) - barWidthPx - textOffsetFromBarPx,\r\n        y: diagram.getY(coordNumber, captionFontSizePx / 3),\r\n        anchor: 'end',\r\n      },\r\n    }\r\n  }\r\n\r\n  const max = direction === 'x' ? diagram.x : diagram.y;\r\n  const totalSteps = direction === 'x' ? diagram.totalStepsX : diagram.totalStepsY;\r\n  const stepsArray = Array.from(Array(totalSteps).keys());\r\n  const step = direction === 'x' ? diagram.stepX : diagram.stepY;\r\n  const getNotation = direction === 'x' ? xNotation : yNotation;\r\n\r\n  const stepsElements = stepsArray.map((_, index) => {\r\n    const notation = getNotation(index);\r\n    const coordNumber = step * (index + 1) * (max / Math.abs(max));\r\n    const isNotable = coordNumber % notableStepSize === 0;\r\n\r\n    return (\r\n      <g key={`${direction}-step-element__${index}`}>\r\n        <line\r\n          x1={notation.bar.x1}\r\n          x2={notation.bar.x2}\r\n          y1={notation.bar.y1}\r\n          y2={notation.bar.y2}\r\n          stroke={color}\r\n        />\r\n\r\n        { isNotable && !hideLevelLine &&\r\n          <line\r\n            x1={notation.levelLine.x1} \r\n            x2={notation.levelLine.x2}\r\n            y1={notation.levelLine.y1}\r\n            y2={notation.levelLine.y2}\r\n            stroke={levelLineColor}\r\n          />\r\n        }\r\n\r\n        { (isNotable || !hideNoNotableCaptions) &&\r\n          <text\r\n            x={notation.text.x}\r\n            y={notation.text.y}\r\n            textAnchor={notation.text.anchor}\r\n            fill={textColor}\r\n            style={{fontSize: `${captionFontSizePx}px`}}\r\n          >\r\n            { coordNumber }\r\n          </text>\r\n        }\r\n      </g>\r\n    );\r\n  });\r\n\r\n  return <>{stepsElements}</>;\r\n}\r\n\r\nexport default Notation;","import { FC, ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\nimport * as CSS from 'csstype';\r\nimport Notation from './components/Notation/Notation';\r\nimport { useDiagram, Diagram } from './hooks';\r\n\r\nexport type RenderFunction = (diagram: Diagram) => ReactNode;\r\n\r\nexport interface CoordinateSystemProps {\r\n  widthPx: number;\r\n  heightPx:  number;\r\n  render?: (diagram: Diagram) => ReactNode;\r\n  x?: number;\r\n  y?: number;\r\n  hideXNotation?: boolean;\r\n  hideYNotation?: boolean;\r\n  stepX?: number;\r\n  stepY?: number;\r\n  notableXStepSize?: number;\r\n  notableYStepSize?: number;\r\n  levelLineXColor?: CSS.Property.Color;\r\n  levelLineYColor?: CSS.Property.Color;\r\n  hideXLevelLine?: boolean;\r\n  hideYLevelLine?: boolean;\r\n  xNotationOffsetPx?: number;\r\n  yNotationOffsetPx?: number;\r\n  xNotationBarWidthPx?: number;\r\n  yNotationBarWidthPx?: number;\r\n  hideNoNotableCaptions?: boolean;\r\n  captionFontSizePx?: number;\r\n  thickness?: CSS.Property.StrokeWidth;\r\n  axisColor?: CSS.Property.Color;\r\n  captionColor?: CSS.Property.Color;\r\n};\r\n\r\nconst CoordinateSystem: FC<CoordinateSystemProps> = ({\r\n  widthPx,\r\n  heightPx,\r\n  render,\r\n  x = 10,\r\n  y = 10,\r\n  hideXNotation = false,\r\n  hideYNotation = false,\r\n  stepX = 1,\r\n  stepY = 1,\r\n  notableXStepSize = 1,\r\n  notableYStepSize = 1,\r\n  levelLineXColor = '#cccccc',\r\n  levelLineYColor = '#cccccc',\r\n  hideXLevelLine = false,\r\n  hideYLevelLine = false,\r\n  xNotationOffsetPx = 36,\r\n  yNotationOffsetPx = 36,\r\n  xNotationBarWidthPx = 12,\r\n  yNotationBarWidthPx = 12,\r\n  captionFontSizePx = 12,\r\n  hideNoNotableCaptions = false,\r\n  thickness = '2px',\r\n  axisColor = '#000000',\r\n  captionColor = '#000000',\r\n}) => {\r\n  const MIN_OFFSET_PX = 8;\r\n  const xOffset = xNotationOffsetPx < MIN_OFFSET_PX || hideXNotation ? MIN_OFFSET_PX : xNotationOffsetPx;\r\n  const yOffset = yNotationOffsetPx < MIN_OFFSET_PX || hideYNotation ? MIN_OFFSET_PX : yNotationOffsetPx;\r\n\r\n  const diagram = useDiagram({\r\n    widthPx,\r\n    heightPx,\r\n    x,\r\n    y,\r\n    stepX,\r\n    stepY,\r\n    xOffset,\r\n    yOffset,\r\n  });\r\n\r\n  return (\r\n    <WrapperStyled\r\n      widthPx={widthPx}\r\n      heightPx={heightPx}\r\n    >\r\n      <Axis color={axisColor} thickness={thickness}>\r\n        <line\r\n          x1={yOffset} \r\n          x2={widthPx - yOffset}\r\n          y1={heightPx - xOffset}\r\n          y2={heightPx - xOffset}\r\n        />\r\n      </Axis>\r\n      <Axis color={axisColor} thickness={thickness}>\r\n        <line\r\n          x1={yOffset}\r\n          x2={yOffset}\r\n          y1={xOffset}\r\n          y2={heightPx - xOffset + 1}\r\n        />\r\n      </Axis>\r\n\r\n      {!hideXNotation &&\r\n        <Notation\r\n          direction=\"x\"\r\n          diagram={diagram}\r\n          barWidthPx={xNotationBarWidthPx}\r\n          notableStepSize={notableXStepSize}\r\n          hideLevelLine={hideXLevelLine}\r\n          captionFontSizePx={captionFontSizePx}\r\n          hideNoNotableCaptions={hideNoNotableCaptions}\r\n          color={axisColor}\r\n          levelLineColor={levelLineXColor}\r\n          textColor={captionColor}\r\n        />\r\n      }\r\n\r\n      {!hideYNotation &&\r\n        <Notation\r\n          direction=\"y\"\r\n          diagram={diagram}\r\n          barWidthPx={yNotationBarWidthPx}\r\n          notableStepSize={notableYStepSize}\r\n          hideLevelLine={hideYLevelLine}\r\n          captionFontSizePx={captionFontSizePx}\r\n          hideNoNotableCaptions={hideNoNotableCaptions}\r\n          color={axisColor}\r\n          levelLineColor={levelLineYColor}\r\n          textColor={captionColor}\r\n        />\r\n      }\r\n\r\n      { render && render(diagram) }\r\n    </WrapperStyled>\r\n  );\r\n}\r\n\r\nconst WrapperStyled = styled.svg<{ \r\n  widthPx: number;\r\n  heightPx: number;\r\n}>`\r\n  user-select: none;\r\n  ${({ widthPx, heightPx }) => `\r\n    width: ${widthPx}px;\r\n    height: ${heightPx}px;\r\n  `}\r\n`;\r\n\r\nconst Axis = styled.g<{\r\n  color: CSS.Property.Color,\r\n  thickness: CSS.Property.StrokeWidth,\r\n}>`\r\n  stroke-dasharray: 0;\r\n\r\n  ${({ color, thickness }) => `\r\n    stroke: ${color};\r\n    stroke-width: ${thickness};\r\n  `}\r\n`;\r\n\r\nexport default CoordinateSystem;","type DiagramConfig = {\r\n  widthPx: number;\r\n  heightPx: number;\r\n  x: number;\r\n  y: number;\r\n  stepX: number;\r\n  stepY: number;\r\n  xOffset: number;\r\n  yOffset: number;\r\n}\r\n\r\ntype GetSingleDimensionalCoordFunction = (coord: number, captionAdjustmentPx?: number) => number;\r\ntype GetTwoDimensionalCoordFunction = (coord: [number, number], captionAdjustmentPx?: number) => [number, number];\r\n\r\nexport type Diagram = {\r\n  getX: GetSingleDimensionalCoordFunction;\r\n  getY: GetSingleDimensionalCoordFunction;\r\n  getXY: GetTwoDimensionalCoordFunction;\r\n  widthPx: number;\r\n  heightPx: number;\r\n  xOffset: number;\r\n  yOffset: number;\r\n  stepX: number;\r\n  stepY: number;\r\n  totalStepsX: number;\r\n  totalStepsY: number;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport function useDiagram({ \r\n  widthPx,\r\n  heightPx,\r\n  x,\r\n  y,\r\n  stepX,\r\n  stepY,\r\n  xOffset,\r\n  yOffset,\r\n}: DiagramConfig): Diagram {\r\n  const totalStepsX = stepX ? Math.abs(Math.floor(x / stepX)) : 1;\r\n  const totalStepsY = stepY ? Math.abs(Math.floor(y / stepY)) : 1;\r\n\r\n  const getX: GetSingleDimensionalCoordFunction = (desiredX, captionAdjustmentPx = 0) => {\r\n    desiredX = desiredX / stepX;\r\n\r\n    if (Math.abs(desiredX) > x) return getX(x, captionAdjustmentPx);\r\n    return (widthPx - yOffset * 2) / totalStepsX * Math.abs(desiredX) + yOffset - captionAdjustmentPx;\r\n  }\r\n\r\n  const getY: GetSingleDimensionalCoordFunction = (desiredY, captionAdjustmentPx = 0) => {\r\n    desiredY = desiredY / stepY;\r\n\r\n    const begin = heightPx - xOffset;\r\n    const end = xOffset;\r\n    const stepSize = (begin - end) / totalStepsY;\r\n  \r\n    if (Math.abs(desiredY) > y) return end;\r\n\r\n    return begin - (stepSize * Math.abs(desiredY)) + captionAdjustmentPx;\r\n  }\r\n\r\n  const getXY: GetTwoDimensionalCoordFunction = ([desiredX, desiredY], captionAdjustmentPx = 0) => {\r\n    return [getX(desiredX, captionAdjustmentPx), getY(desiredY, captionAdjustmentPx)];\r\n  }\r\n\r\n  return {\r\n    getX,\r\n    getY,\r\n    getXY,\r\n    widthPx,\r\n    heightPx,\r\n    xOffset,\r\n    yOffset,\r\n    stepX,\r\n    stepY,\r\n    totalStepsX,\r\n    totalStepsY,\r\n    x,\r\n    y,\r\n  };\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport function usePrevious<T>(value: T): T {\r\n  const ref = useRef(value);\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { Bar, OnBarValueChangedEventFunction, GenerateBarsFunction } from '../types';\r\nimport { usePrevious } from '../../../hooks';\r\n\r\ntype SupportConfig = {\r\n  barsProp: Bar[] | number;\r\n  internalBars: Required<Bar>[];\r\n  setInternalBars: React.Dispatch<React.SetStateAction<Required<Bar>[]>>;\r\n  generateBars: GenerateBarsFunction;\r\n  onBarValueChanged: OnBarValueChangedEventFunction;\r\n}\r\n\r\nexport function useTwoWayDataChangeSupport({\r\n  barsProp,\r\n  internalBars,\r\n  setInternalBars,\r\n  generateBars,\r\n  onBarValueChanged,\r\n}: SupportConfig): void {\r\n  const prevBarsPropValue = usePrevious(barsProp);\r\n  const prevInternalBarsValue = usePrevious(internalBars);\r\n\r\n  useEffect(() => {\r\n    if (typeof prevBarsPropValue === 'number' && typeof barsProp === 'number') {\r\n      preserveStateOnNumberToNumberBarsPropChange();\r\n    } else {\r\n      setInternalBars(generateBars(barsProp));\r\n    }\r\n  }, [barsProp, prevBarsPropValue]);\r\n\r\n  useEffect(() => {\r\n    notifyInternalBarsUpdates();\r\n  }, [internalBars, prevInternalBarsValue]);\r\n\r\n  function preserveStateOnNumberToNumberBarsPropChange(): void {\r\n    const existingBars = generateBars(internalBars, barsProp as number);\r\n    const numNeededAdditionalBars = (barsProp as number) - (prevBarsPropValue as number);\r\n    let additionalBars: Required<Bar>[] = [];\r\n      \r\n    if (numNeededAdditionalBars > 0) {\r\n      additionalBars = generateBars(numNeededAdditionalBars).map((bar, index) => ({\r\n        ...bar,\r\n        key: String(existingBars.length + index),\r\n      }));\r\n    }\r\n\r\n    setInternalBars([\r\n      ...existingBars,\r\n      ...additionalBars,\r\n    ]);\r\n  }\r\n\r\n  function notifyInternalBarsUpdates(): void {\r\n    const prevValuesMap: Record<string, number> = {};\r\n    prevInternalBarsValue.forEach(bar => {\r\n      prevValuesMap[bar.key] = bar.value;\r\n    })\r\n\r\n    internalBars.forEach(bar => {\r\n      const prevValue = prevValuesMap[bar.key];\r\n      const currentValue = bar.value;\r\n\r\n      if (prevValue !== currentValue) {\r\n        onBarValueChanged(bar.key, currentValue);\r\n      }\r\n    });\r\n  }\r\n}","import { FC, useState, useEffect } from 'react';\r\nimport * as CSS from 'csstype';\r\nimport styled from 'styled-components';\r\nimport { useIsMousePressed } from '../../../../hooks';\r\nimport { Diagram } from '../../../CoordinateSystem/hooks'\r\nimport { Bar } from '../../types';\r\n\r\ninterface BarsDisplayProps {\r\n  diagram: Diagram;\r\n  bars: Required<Bar>[];\r\n  xMax: number;\r\n  gapPercentage: number;\r\n  markerSizePx: number;\r\n  markerColor: CSS.Property.Color;\r\n  markerBorderColor: CSS.Property.Color;\r\n  markerBorderThickness: CSS.Property.Color;\r\n  allowDrag?: boolean;\r\n  showDragLevelLine?: boolean;\r\n  dragLevelLineColor?: CSS.Property.Color;\r\n  dragLevelLineFontSizePx?: number;\r\n  dragLevelLineCaptionColor?: CSS.Property.Color;\r\n  dragLevelLineCaptionOffsetPx?: number;\r\n  dragDistanceStepPercentage?: number;\r\n  onDragDown?: (bar: Required<Bar>) => void;\r\n  onDragUp?: (bar: Required<Bar>) => void;\r\n};\r\n\r\nconst BarsDisplay: FC<BarsDisplayProps> = ({\r\n  diagram,\r\n  bars,\r\n  xMax,\r\n  gapPercentage,\r\n  markerSizePx,\r\n  markerColor,\r\n  markerBorderColor,\r\n  markerBorderThickness,\r\n  allowDrag = true,\r\n  showDragLevelLine = true,\r\n  dragLevelLineColor = '#000000',\r\n  dragLevelLineFontSizePx = 12,\r\n  dragLevelLineCaptionColor = '#000000',\r\n  dragLevelLineCaptionOffsetPx = 6,\r\n  dragDistanceStepPercentage = 0.85,\r\n  onDragDown = () => {},\r\n  onDragUp = () => {},\r\n}) => {\r\n  const barWidthWithoutGaps = xMax / bars.length;\r\n  const gapSize = barWidthWithoutGaps * gapPercentage;\r\n  const barWidth = barWidthWithoutGaps - gapSize - (gapSize / bars.length);\r\n\r\n  const getBarXCoord = (bar: Required<Bar>, barIdx: number) => {\r\n    const barNumber = barIdx + 1;\r\n    const gapsSizeBehind = barNumber * gapSize;\r\n    const barsSizeBehind = barIdx * barWidth;\r\n\r\n    return gapsSizeBehind + barsSizeBehind;\r\n  }\r\n\r\n  const [selectedDragBar, setSelectedDragBar] = useState<Required<Bar> | null>(null);\r\n  const [lastDragMoveCoords, setLastDragMoveCoords] = useState<[number, number]>([0, 0]);\r\n  const isMousePressed = useIsMousePressed();\r\n\r\n  useEffect(() => {\r\n    if (!isMousePressed) endDrag();\r\n  }, [isMousePressed]);\r\n\r\n  function startDrag(event: any, bar: Required<Bar>): void {\r\n    setSelectedDragBar(bar);\r\n    setLastDragMoveCoords([event.clientX, event.clientY]);\r\n  }\r\n\r\n  function endDrag(): void {\r\n    setSelectedDragBar(null);\r\n    setLastDragMoveCoords([0, 0]);\r\n  }\r\n\r\n  function drag(event: any, bar: Required<Bar>): void {\r\n    if (selectedDragBar && selectedDragBar.key === bar.key && isMousePressed) {\r\n      const [, prevClientY] = lastDragMoveCoords;\r\n      const currentClientY = event.clientY;\r\n\r\n      const minDistanceToDrag = (diagram.getY(0) - diagram.getY(diagram.stepY)) * dragDistanceStepPercentage;\r\n      const isUp = (prevClientY - currentClientY) >= minDistanceToDrag;\r\n      const isDown = (currentClientY - prevClientY) >= minDistanceToDrag;\r\n\r\n      if (isUp || isDown) setLastDragMoveCoords([event.clientX, event.clientY]);\r\n\r\n      if (isUp && allowDrag) {\r\n        onDragUp(bar);\r\n      }\r\n\r\n      if (isDown && allowDrag) {\r\n        onDragDown(bar);\r\n      }\r\n    }\r\n  }\r\n\r\n  const barsElements = bars.map((bar, barIdx) => {\r\n    const barXCoord = diagram.getX(getBarXCoord(bar, barIdx));\r\n    const barYCoord = diagram.getY(bar.value);\r\n    const finalBarWidth = diagram.getX(barWidth) - diagram.getX(0);\r\n    const finalBarHeight = diagram.getY(0) - diagram.getY(bar.value);\r\n\r\n    const markerXCoord = barXCoord + (finalBarWidth / 2) - (markerSizePx / 2);\r\n    const markerYCoord = barYCoord - (markerSizePx / 2);\r\n\r\n    return (\r\n      <g key={`bar__${bar.key}`}>\r\n        <rect\r\n          x={barXCoord}\r\n          y={barYCoord}\r\n          width={finalBarWidth}\r\n          height={finalBarHeight}\r\n          fill={bar.color}\r\n          stroke={bar.borderColor}\r\n          strokeWidth={bar.borderThickness}\r\n        />\r\n\r\n        <rect\r\n          x={barXCoord}\r\n          y={0}\r\n          width={finalBarWidth}\r\n          height={diagram.heightPx}\r\n          fill=\"transparent\"\r\n          onMouseMove={(e) => drag(e, bar)}\r\n        />\r\n\r\n        { allowDrag &&\r\n          <MarkerStyled\r\n            x={markerXCoord}\r\n            y={markerYCoord}\r\n            width={markerSizePx}\r\n            height={markerSizePx}\r\n            fill={markerColor}\r\n            stroke={markerBorderColor}\r\n            strokeWidth={markerBorderThickness}\r\n            onMouseDown={(e) => startDrag(e, bar)}\r\n          />\r\n        }\r\n      </g>\r\n    );  \r\n  })\r\n\r\n  const activeBar = bars.find((bar) => bar.key === selectedDragBar?.key);\r\n\r\n  return (\r\n    <g>\r\n      { barsElements }\r\n\r\n      { showDragLevelLine && activeBar && selectedDragBar &&\r\n        <g>\r\n          <line\r\n            x1={diagram.getX(0)} \r\n            x2={diagram.getX(diagram.x)}\r\n            y1={diagram.getY(activeBar.value)}\r\n            y2={diagram.getY(activeBar.value)}\r\n            stroke={dragLevelLineColor}\r\n            strokeDasharray=\"4\"\r\n          />\r\n\r\n          <text\r\n            x={diagram.getX(diagram.x) + dragLevelLineCaptionOffsetPx}\r\n            y={diagram.getY(activeBar.value) + dragLevelLineFontSizePx / 3}\r\n            fill={dragLevelLineCaptionColor}\r\n            style={{fontSize: `${dragLevelLineFontSizePx}px`}}\r\n          >\r\n            { activeBar.value }\r\n          </text>\r\n        </g>\r\n      }\r\n    </g>\r\n  );\r\n}\r\n\r\nconst MarkerStyled = styled.rect`\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default BarsDisplay;\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport function useIsMousePressed(): boolean {\r\n  const [isMousePressed, setIsMousePressed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    function pressed() {\r\n      setIsMousePressed(true);\r\n    }\r\n\r\n    function unpressed() {\r\n      setIsMousePressed(false)\r\n    }\r\n\r\n    document.body.addEventListener('mousedown', pressed);\r\n    document.body.addEventListener('mouseup', unpressed);\r\n    \r\n    return () => {\r\n      document.body.removeEventListener('mousedown', pressed);\r\n      document.body.removeEventListener('mouseup', unpressed);\r\n    };\r\n  }, []);\r\n\r\n  return isMousePressed;\r\n}\r\n","import { FC, useState } from 'react';\r\nimport * as CSS from 'csstype';\r\nimport CoordinateSystem from '../CoordinateSystem/CoordinateSystem';\r\nimport { Bar, OnBarValueChangedEventFunction } from './types';\r\nimport { useBarsGenerator, useTwoWayDataChangeSupport } from './hooks'; \r\nimport BarsDisplay from './components/BarsDisplay/BarsDisplay';\r\n\r\nexport interface UiBarsDiagramProps {\r\n  bars: Bar[] | number;\r\n  defaultBarValue?: number;\r\n  defaultBarColor?: CSS.Property.Color;\r\n  defaultBarBorderColor?: CSS.Property.Color;\r\n  defaultBarBorderThickness?: CSS.Property.StrokeWidth;\r\n  barGapPercentage?: number;\r\n  widthPx?: number;\r\n  heightPx?: number;\r\n  readOnly?: boolean;\r\n  hideDragLevelLine?: boolean;\r\n  dragLevelLineColor?: CSS.Property.Color;\r\n  dragLevelLineFontSizePx?: number;\r\n  dragLevelLineCaptionColor?: CSS.Property.Color;\r\n  dragLevelLineCaptionOffsetPx?: number;\r\n  max?: number;\r\n  step?: number;\r\n  notableStep?: number;\r\n  showNoNotableCaptions?: boolean;\r\n  levelLineColor?: CSS.Property.Color;\r\n  notationOffsetPx?: number;\r\n  notationBarWidthPx?: number;\r\n  captionFontSizePx?: number;\r\n  thickness?: CSS.Property.StrokeWidth;\r\n  axisColor?: CSS.Property.Color;\r\n  captionColor?: CSS.Property.Color;\r\n  markerSizePx?: number;\r\n  markerColor?: CSS.Property.Color;\r\n  markerBorderColor?: CSS.Property.Color;\r\n  markerBorderThickness?: CSS.Property.Color;\r\n  onBarValueChanged?: OnBarValueChangedEventFunction;\r\n};\r\n\r\nconst UiBarsDiagram: FC<UiBarsDiagramProps> = ({\r\n  bars,\r\n  defaultBarValue = 0,\r\n  defaultBarColor = '#3498DB',\r\n  defaultBarBorderColor = '#000000',\r\n  defaultBarBorderThickness = '1px',\r\n  barGapPercentage = 0.2,\r\n  widthPx = 500,\r\n  heightPx = 500,\r\n  readOnly = false,\r\n  hideDragLevelLine = false,\r\n  dragLevelLineColor = '#000000',\r\n  dragLevelLineFontSizePx = 12,\r\n  dragLevelLineCaptionColor = '#000000',\r\n  dragLevelLineCaptionOffsetPx = 6,\r\n  max = 10,\r\n  step = 1,\r\n  notableStep = 1,\r\n  showNoNotableCaptions = false,\r\n  levelLineColor = '#cccccc',\r\n  notationOffsetPx = 32,\r\n  notationBarWidthPx = 12,\r\n  captionFontSizePx = 12,\r\n  thickness = '2px',\r\n  axisColor = '#000000',\r\n  captionColor = '#000000',\r\n  markerSizePx = 12,\r\n  markerColor = '#ffffff',\r\n  markerBorderColor = '#000000',\r\n  markerBorderThickness = '1px',\r\n  onBarValueChanged = () => {},\r\n}) => {\r\n  const X_AXIS_MAX = 100;\r\n\r\n  const generateBars = useBarsGenerator({\r\n    defaultBarValue,\r\n    defaultBarColor,\r\n    defaultBarBorderColor,\r\n    defaultBarBorderThickness,\r\n  });\r\n\r\n  const [internalBars, setInternalBars] = useState(generateBars(bars));\r\n\r\n  useTwoWayDataChangeSupport({\r\n    barsProp: bars,\r\n    internalBars,\r\n    setInternalBars,\r\n    generateBars,\r\n    onBarValueChanged,\r\n  });\r\n\r\n  function changeValue(key: string, value: number): void {\r\n    const internalBarsCopy = [...internalBars];\r\n    const targetBarIdx = internalBarsCopy.findIndex(bar => bar.key === key);\r\n\r\n    if (targetBarIdx !== -1) {\r\n      const targetBar = internalBarsCopy[targetBarIdx];\r\n\r\n      internalBarsCopy.splice(targetBarIdx, 1, {\r\n        ...targetBar,\r\n        value,\r\n      });\r\n\r\n      setInternalBars(internalBarsCopy);\r\n    }\r\n  }\r\n\r\n  function handleDragUp(bar: Required<Bar>): void {\r\n    if (bar.value < max) {\r\n      changeValue(bar.key, bar.value + step)\r\n    }\r\n  }\r\n\r\n  function handleDragDown(bar: Required<Bar>): void {\r\n    if (bar.value > 0) {\r\n      let finalValue = bar.value - step;\r\n      if (bar.value > max) finalValue = max - step;\r\n      changeValue(bar.key, finalValue);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CoordinateSystem\r\n      widthPx={widthPx}\r\n      heightPx={heightPx}\r\n      x={X_AXIS_MAX}\r\n      y={max}\r\n      stepY={step}\r\n      notableYStepSize={notableStep}\r\n      hideXNotation\r\n      hideNoNotableCaptions={!showNoNotableCaptions}\r\n      levelLineYColor={levelLineColor}\r\n      yNotationOffsetPx={notationOffsetPx}\r\n      yNotationBarWidthPx={notationBarWidthPx}\r\n      captionFontSizePx={captionFontSizePx}\r\n      thickness={thickness}\r\n      axisColor={axisColor}\r\n      captionColor={captionColor}\r\n      render={(diagram) => { return (\r\n        <BarsDisplay\r\n          diagram={diagram}\r\n          allowDrag={!readOnly}\r\n          bars={internalBars}\r\n          xMax={X_AXIS_MAX}\r\n          gapPercentage={barGapPercentage}\r\n          showDragLevelLine={!hideDragLevelLine}\r\n          dragLevelLineColor={dragLevelLineColor}\r\n          dragLevelLineFontSizePx={dragLevelLineFontSizePx}\r\n          dragLevelLineCaptionColor={dragLevelLineCaptionColor}\r\n          dragLevelLineCaptionOffsetPx={dragLevelLineCaptionOffsetPx}\r\n          markerSizePx={markerSizePx}\r\n          markerColor={markerColor}\r\n          markerBorderColor={markerBorderColor}\r\n          markerBorderThickness={markerBorderThickness}\r\n          onDragUp={handleDragUp}\r\n          onDragDown={handleDragDown}\r\n        />\r\n      )}}\r\n    />\r\n  );\r\n}\r\n\r\nexport default UiBarsDiagram;","import * as CSS from 'csstype';\r\nimport { Bar, GenerateBarsFunction } from '../types';\r\n\r\ntype BarsGeneratorConfig = {\r\n  defaultBarValue: number;\r\n  defaultBarColor: CSS.Property.Color;\r\n  defaultBarBorderColor: CSS.Property.Color;\r\n  defaultBarBorderThickness: CSS.Property.StrokeWidth;\r\n}\r\n\r\nexport function useBarsGenerator({\r\n  defaultBarValue,\r\n  defaultBarColor,\r\n  defaultBarBorderColor,\r\n  defaultBarBorderThickness,\r\n}: BarsGeneratorConfig): GenerateBarsFunction {\r\n  const generateBars: GenerateBarsFunction = (baseBarsState: Bar[] | number, maxAmount = Infinity) => {\r\n    const barsIterable = Array.isArray(baseBarsState) ? baseBarsState : Array.from(Array(baseBarsState).keys());\r\n    return barsIterable.map((bar, index) => {\r\n      const barObject = typeof bar === 'object' ? bar : {};\r\n\r\n      return {\r\n        key: String(index),\r\n        value: defaultBarValue,\r\n        color: defaultBarColor,\r\n        borderColor: defaultBarBorderColor,\r\n        borderThickness: defaultBarBorderThickness,\r\n        ...barObject,\r\n      } as Required<Bar>;\r\n    })\r\n    .filter((item, index) => index < maxAmount);\r\n  }\r\n\r\n  return generateBars;\r\n}\r\n","import 'normalize.css';\nimport './index.css';\nimport { FC, useState } from 'react';\nimport UiBarsDiagram from './components/UiBarsDiagram/UiBarsDiagram';\nimport styled from 'styled-components';\n\nconst App: FC = () => {\n  const [yAxisMaxBar1, setYAxisMaxBar1] = useState(15);\n  const [yAxisMaxBar2, setYAxisMaxBar2] = useState(15);\n\n  const [bars1ReadOnly, setBars1ReadOnly] = useState(false);\n  const [bars2ReadOnly, setBars2ReadOnly] = useState(false);\n\n  const [bars1, setBars1] = useState(4);\n\n  const [bars2, setBars2] = useState([\n    {\n      key: 'a',\n      value: 3,\n      color: '#f542c2',\n    },\n    {\n      key: 'b',\n      value: 6,\n      color: '#42f56c',\n      borderThickness: '3px',\n      borderColor: '#289e49',\n    },\n    {\n      key: 'd',\n      value: 4,\n    },\n    {\n      key: 'e',\n      value: 8,\n      color: '#bf264c',\n      borderThickness: '0',\n    }\n  ]);\n\n  function changeBar2Value(key: string, value: number): void {\n    const bars2Copy = [...bars2];\n    const targetBarIdx = bars2Copy.findIndex(bar => bar.key === key);\n\n    if (targetBarIdx !== -1) {\n      const targetBar = bars2Copy[targetBarIdx];\n\n      bars2Copy.splice(targetBarIdx, 1, {\n        ...targetBar,\n        value,\n      });\n\n      setBars2(bars2Copy);\n    }\n  }\n\n  function handleYAxisMaxBar1Change(e: any) {\n    let resultValue = e.target.value;\n    if (resultValue < 1) resultValue = 1; \n    setYAxisMaxBar1(resultValue);\n  }\n\n  function handleYAxisMaxBar2Change(e: any) {\n    let resultValue = e.target.value;\n    if (resultValue < 1) resultValue = 1; \n    setYAxisMaxBar2(resultValue);\n  }\n\n  return (\n    <WrapperStyled>\n      <div>\n        <InputContainerStyled>\n          <div>\n            <span>Y-Axis Maximum: </span>\n            <input type=\"number\" value={yAxisMaxBar1} onChange={handleYAxisMaxBar1Change} />\n          </div>\n          <div style={{ marginTop: '4px' }}>\n            <button onClick={() => setBars1(bars1 + 1)}>Add bar</button>\n            <button onClick={() => bars1 ? setBars1(bars1 - 1) : {}}>Remove bar</button>\n            <button onClick={() => setBars1ReadOnly(!bars1ReadOnly)}>Read Only</button>\n          </div>\n        </InputContainerStyled>\n        <div>\n          <UiBarsDiagram\n            bars={bars1}\n            max={yAxisMaxBar1}\n            notableStep={5}\n            readOnly={bars1ReadOnly}\n            defaultBarValue={2}\n          />\n        </div>\n      </div>\n\n      <div>\n        <InputContainerStyled>\n          <div>\n            <span>Y-Axis Maximum: </span>\n            <input type=\"number\" value={yAxisMaxBar2} onChange={handleYAxisMaxBar2Change} />\n          </div>\n          <div style={{ marginTop: '4px' }}>\n            <button onClick={() => setBars2ReadOnly(!bars2ReadOnly)}>Read Only</button>\n          </div>\n        </InputContainerStyled>\n        <div>\n          <UiBarsDiagram\n            bars={bars2}\n            max={yAxisMaxBar2}\n            notableStep={5}\n            readOnly={bars2ReadOnly}\n            onBarValueChanged={changeBar2Value}\n          />\n        </div>\n      </div>\n    </WrapperStyled>\n  );\n}\n\nconst WrapperStyled = styled.div`\n  align-items: center;\n  justify-content: space-around;\n  min-height: 100vh;\n`;\n\nconst InputContainerStyled = styled.div`\n  font-weight: bold;\n  margin-bottom: 24px;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}